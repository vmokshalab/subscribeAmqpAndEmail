{
  "name": "mailgun-js",
  "description": "Simple Node.js helper module for Mailgun API",
  "keywords": [
    "email",
    "mailgun"
  ],
  "version": "0.4.8",
  "homepage": "https://github.com/1lobby/mailgun-js",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/1lobby/mailgun-js.git"
  },
  "bugs": {
    "url": "http://github.com/1lobby/mailgun-js/issues"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "main": "./lib/mailgun.js",
  "dependencies": {
    "form-data": "~0.1.2",
    "inflection": "~1.2.6",
    "path-proxy": "~1.0",
    "q": "~1.0.1"
  },
  "author": {
    "name": "Bojan Djurkovic",
    "email": "bojan@onelobby.com"
  },
  "contributors": [
    {
      "name": "Bojan Djurkovic"
    },
    {
      "name": "Adam Magaluk"
    },
    {
      "name": "Bill Johnston"
    },
    {
      "name": "Jamie Curtis"
    },
    {
      "name": "Serhiy Oplakanets"
    }
  ],
  "devDependencies": {
    "mocha": "*"
  },
  "scripts": {
    "test": "mocha"
  },
  "readme": "# mailgun.js\n\nSimple Node.js module for [Mailgun](http://www.mailgun.com).\n\n## Installation\n\n`npm install mailgun-js`\n\n## Usage overview\n\nPlease see [Mailgun Documentation](http://documentation.mailgun.net) for full Mailgun API reference.\n\nCurrently we implement the `send message` (non-MIME) API and the `Domains`, `Routes`, `Campaigns`, `Mailing Lists`, `Unsubscribes`, `Stats`, and `Bounces` API's. These would be the most common\nand practical API's to be programmatically used. Others would be easy to add if needed.\n\nThis module works by providing proxy objects for interacting with different resources through the Mailgun API.\nMost methods take a `data` parameter, which is a Javascript object that would contain the arguments for the Mailgun API.\nAll methods take a final parameter callback with two parameters: `error`, and `body`.\nWe try to parse the `body` into a javascript object, and return it to the callback as such for easier use and inspection by the client.\nIf there was an error a new `Error` object will be passed to the callback in the `error` parameter.\nSee the `/docs` folder for detailed documentation. For full usage examples see the `/test` folder.\n\n```js\nvar api_key = 'key-XXXXXXXXXXXXXXXXXXXXXXX';\nvar domain = 'mydomain.mailgun.org';\nvar Mailgun = require('mailgun-js');\n\nvar mailgun = new Mailgun({apiKey: api_key, domain: domain});\n\nvar data = {\n  from: 'Excited User <me@samples.mailgun.org>',\n  to: 'serobnic@mail.ru',\n  subject: 'Hello',\n  text: 'Testing some Mailgun awesomness!'\n};\n\nmailgun.messages().send(data, function (error, body) {\n  console.log(body);\n});\n```\n\nMessages stored using the Mailgun `store()` action can be retrieved using `messages(<message_key>).info()` function.\nOptionally the MIME representation of the message can be retrieved if `MIME` argument is passed in and set to `true`.\n\nSomething more elaborate. Get mailing list info, create a member and get mailing list members and update member.\nNotice that the proxy objects can be reused.\n\n```js\nvar list = mailgun.lists('mylist@mycompany.com');\n\nlist.info(function (err, data) {\n  // `data` is mailing list info\n  console.log(data);\n});\n\nvar bob = {\n  subscribed: true,\n  address: 'bob@gmail.com',\n  name: 'Bob Bar',\n  vars: {age: 26}\n};\n\nlist.members().create(bob, function (err, data) {\n  // `data` is the member details\n  console.log(data);\n});\n\nlist.members().list(function (err, members) {\n  // `members` is the list of members\n  console.log(members);\n});\n\nlist.members('bob@gmail.com').update({ name: 'Foo Bar' }, function (err, body) {\n  console.log(body);\n});\n```\n\n#### Attachments\n\nAttachments can be sent using either the `attachment` or `inline` parameters. `inline` parameter can be use to send an\nattachment with `inline` disposition. It can be used to send inline images. Both types are supported with same mechanisms\nas described, we will just use `attachment` parameter in the documentation below but same stands for `inline`.\n\nSending attachments can be done in a few ways. We can use the path to a file in the `attachment` parameter.\nIf the `attachment` parameter is of type `string` it is assumed to be the path to a file.\n\n```js\nvar filepath = path.join(__dirname, '/mailgun_logo.png');\n\nvar data = {\n  from: 'Excited User <me@samples.mailgun.org>',\n  to: 'serobnic@mail.ru',\n  subject: 'Hello',\n  text: 'Testing some Mailgun awesomness!',\n  attachment: filepath\n};\n\nmailgun.messages().send(data, function (error, body) {\n  console.log(body);\n});\n```\n\nWe can pass a buffer (has to be a `Buffer` object) of the data. If a buffer is used the data will be attached using a\ngeneric filename \"file\".\n\n```js\nvar filepath = path.join(__dirname, '/mailgun_logo.png');\nvar file = fs.readFileSync(filepath);\n\nvar data = {\n  from: 'Excited User <me@samples.mailgun.org>',\n  to: 'serobnic@mail.ru',\n  subject: 'Hello',\n  text: 'Testing some Mailgun awesomness!',\n  attachment: file\n};\n\nmailgun.messages().send(data, function (error, body) {\n  console.log(body);\n});\n```\n\nFinally we provide a `Mailgun.Attachment` class to add attachment and specify both the buffer and filename data.\n\n```js\nvar filename = '/mailgun_logo.png';\nvar filepath = path.join(__dirname, filename);\nvar file = fs.readFileSync(filepath);\n\nvar attch = new Mailgun.Attachment(file, filename);\n\nvar data = {\n  from: 'Excited User <me@samples.mailgun.org>',\n  to: 'serobnic@mail.ru',\n  subject: 'Hello',\n  text: 'Testing some Mailgun awesomness!',\n  attachment: attch\n};\n\nmailgun.messages().send(data, function (error, body) {\n  console.log(body);\n});\n```\n\nIf an attachment object is not of type `Buffer` or a `string` or a `Mailgun.Attachment` object with valid data it is\nignored. Multiple attachments can be sent by passing an array in the `attachment` parameter. The array elements can\nbe of any one of the valid types and each one will be handled appropriately.\n\n#### Creating mailing list members\n\n`members().create({data})` will create a mailing list member with `data`. Mailgun also offers a resource for creating\nmembers in bulk. Doing a `POST` to `/lists/<address>/members.json` adds multiple members, up to 1,000 per call,\nto a Mailing List. This can be accomplished using `members().add()`.\n\n```js\nvar members = [\n  {\n    address: 'Alice <alice@example.com>',\n    vars: { age: 26 }\n  },\n  {\n    name: 'Bob',\n    address: 'bob@example.com',\n    vars: { age: 34 }\n  }\n];\n\nmailgun.lists('mylist@mycompany.com').members().add({ members: members, subscribed: true }, function (err, body) {\n  console.log(body);\n});\n```\n\n## Generic requests\n\nMailgun-js also provides helper methods to allow users to interact with parts of the api that are not exposed already.\nThese are not tied to the domain passed in the constructor, and thus require the full path with the domain\npassed in the `resource` argument.\n\n* `mailgun.get(resource, data, callback)` - sends GET request to the specified resource on api.\n* `mailgun.post(resource, data, callback)` - sends POST request to the specified resource on api.\n* `mailgun.delete(resource, data, callback)` - sends DELETE request to the specified resource on api.\n* `mailgun.put(resource, data, callback)` - sends PUT request to the specified resource on api.\n\nExample: Get some stats\n\n```js\nmailgun.get('/samples.mailgun.org/stats', { event: ['sent', 'delivered'] }, function (error, body) {\n  console.log(body);\n});\n```\n\n## Promises\n\nModule works with Node-style callbacks, but also implements promises with the [Q](http://github.com/kriskowal/q) library.\n\n```js\nmailgun.lists('mylist@mydomain.com').info().then(function (data) {\n  console.log(data);\n}, function (err) {\n  console.log(err);\n});\n```\n\nThe function passed as 2nd argument is optional and not needed if you don't care about the fail case.\n\n## Tests\n\nTo run the test suite you must first have a Mailgun account with a domain setup. Then create a file named _./test/auth.json_, which contains your credentials as JSON, for example:\n\n```json\n{ \"api_key\": \"key-XXXXXXXXXXXXXXXXXXXXXXX\", \"domain\": \"mydomain.mailgun.org\" }\n```\n\nYou should edit _./test/fixture.json_ and modify the data to match your context.\n\nThen install the dev dependencies and execute the test suite:\n\n```\n$ npm install\n$ npm test\n```\n\nThe tests will call Mailgun API, and will send a test email, create route(s), mailing list and mailing list member.\n\n## Notes\n\nThis project is not endorsed by or affiliated with [Mailgun](http://www.mailgun.com).\nThe general design and some code was heavily inspired by [node-heroku-client](https://github.com/jclem/node-heroku-client).\n\n## License\n\nCopyright 2012, 2013, 2014 OneLobby\n\nLicensed under the MIT License.\n",
  "readmeFilename": "README.md",
  "_id": "mailgun-js@0.4.8",
  "dist": {
    "shasum": "280684ace183bbd5d50e294fb3b3201bae1719a2"
  },
  "_from": "mailgun-js@",
  "_resolved": "https://registry.npmjs.org/mailgun-js/-/mailgun-js-0.4.8.tgz"
}
